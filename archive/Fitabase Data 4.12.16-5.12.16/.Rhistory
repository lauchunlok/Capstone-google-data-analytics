family = "mono"))
b +
xlab("Genre") +
ylab("Gross % US") +
ggtitle("Domestic Gross % by Genre") +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
axis.title.x = element_text(color="Blue", size=30),
axis.title.y = element_text(color="Blue", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=20),
legend.text = element_text(size=12),
#legend.position = c(1,1),
#legend.justification = c(1,1),
plot.title = element_text(color="Black", size=40)
q <- p +
geom_jitter(aes(size=BudgetMillions, color=Studio)) +
geom_boxplot(alpha=0.7, outlier.colour = NA)
q
p +
geom_jitter(aes(size=BudgetMillions, color=Studio)) +
geom_boxplot(alpha=0.7)
q <- p +
geom_jitter(aes(size=BudgetMillions, color=Studio)) +
geom_boxplot(alpha=0.7, outlier.colour = NA)
q
q <- q +
xlab("Genre") + #x axis title
ylab("Gross % US") + #y axis title
ggtitle("Domestic Gross % by Genre") #plot title
q
#Theme
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.test.x = element_text(size=20),
axis.test.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.test = element_text(size=12)
)
q
#Theme
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.test = element_text(size=12)
)
q
#Theme
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
)
q
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
)
q
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
)
q
#Non-data ink
q <- q +
xlab("Genre") + #x axis title
ylab("Gross % US") + #y axis title
ggtitle("Domestic Gross % by Genre") #plot title
q
q
#Let's "Save" our progress by placing it into a new object:
q <- p +
geom_jitter(aes(size=BudgetMillions, color=Studio)) +
geom_boxplot(alpha=0.7, outlier.colour = NA)
q
#Non-data ink
q <- q +
xlab("Genre") + #x axis title
ylab("Gross % US") + #y axis title
ggtitle("Domestic Gross % by Genre") #plot title
q
#Theme
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
)
q
#filter
movies_filter <- movies[(movies$Genre=="action"|
movies$Genre=="adventure"|
movies$Genre=="animation"|
movies$Genre=="comedy"|
movies$Genre=="drama") &
(movies$Studio=="Buena Vista Studios"|
movies$Studio=="Fox"|
movies$Studio=="Paramount Pictures"|
movies$Studio=="Sony"|
movies$Studio=="Universal"|
movies$Studio=="WB"), ]
# rename
colnames(movies_filter) <- c("Day.of.Week",
"Director",
"Genre",
"MovieTitle",
"ReleaseDate",
"Studio",
"Adjusted.Gross.Millions",
"BudgetMillions",
"GrossMillions",
"IMDbRating",
"MovieLensRating",
"OverseasMillions",
"OverseasPercent",
"ProfitMillions",
"ProfitPercent",
"RuntimeMintes",
"USMillions",
"Gross.Percent.US"
)
a <- ggplot(data=movies_filter, aes(x=Genre, y=Gross.Percent.US))
# point geom layer
a + geom_point(aes(size=BudgetMillions, color=Studio))
# add a boxplot instead of points
a + geom_boxplot(aes(size=BudgetMillions))
# Place boxplot on top of jitter
a + geom_jitter(aes(size=BudgetMillions, color=Studio)) +
geom_boxplot(alpha=0.7,  outlier.colour = NA)
b <-  a + geom_jitter(aes(size=BudgetMillions, color=Studio)) +
geom_boxplot(alpha=0.7,  outlier.colour = NA)
# 2. label formatting: - i. xlab, ii. ylab, iii. ggtitle
b +
xlab("Genre") +
ylab("Gross % US") +
ggtitle("Domestic Gross % by Genre") +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
axis.title.x = element_text(color="Blue", size=30),
axis.title.y = element_text(color="Blue", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=20),
legend.text = element_text(size=12),
#legend.position = c(1,1),
#legend.justification = c(1,1),
plot.title = element_text(color="Black", size=40)
b
b +
xlab("Genre") +
ylab("Gross % US") +
ggtitle("Domestic Gross % by Genre") +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
axis.title.x = element_text(color="Blue", size=30),
axis.title.y = element_text(color="Blue", size=30),
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
legend.title = element_text(size=20),
legend.text = element_text(size=12),
#legend.position = c(1,1),
#legend.justification = c(1,1),
plot.title = element_text(color="Black", size=40)
)
windowsFonts()
library(extrafont)
font_import()
loadfonts(device = "win")
library(extrafont)
install.packages("extrafont")
library(extrafont)
font_import()
library(extrafont)
font_import()
font_import()
library(jsonlite)
library(stringr)
library("jpeg")
library(tidyr)
library(utf8)
#---------------------------------------------------------
#Download JSON File from Instagram for a specific Hashtag
#---------------------------------------------------------
hashtag <- "sponsored"
url_start <- str_glue("http://instagram.com/explore/tags/{hashtag}/?__a=1")
json <- fromJSON(url_start)
edge_hashtag_to_media <- json$graphql$hashtag$edge_hashtag_to_media
end_cursor <- edge_hashtag_to_media$page_info$end_cursor
posts <- edge_hashtag_to_media$edges$node
#-----------------------------
#Extract Information per Post
#-----------------------------
index <- 1
post_id <- list()
post_url <- list()
post_text <- list()
post_time <- list()
post_likes <- list()
post_owner <- list()
post_img_url <- list()
extractInfo <- function(index){
print("extractInfo function called")
maxrows <- nrow(posts)
for(i in 1:maxrows){
if(i == maxrows){
assign("index", index, envir = .GlobalEnv)
assign("post_id", post_id, envir = .GlobalEnv)
assign("post_text", post_text, envir = .GlobalEnv)
assign("post_time", post_time, envir = .GlobalEnv)
assign("post_img_url", post_img_url, envir = .GlobalEnv)
assign("post_url", post_url, envir = .GlobalEnv)
assign("post_likes", post_likes, envir = .GlobalEnv)
assign("post_owner", post_owner, envir = .GlobalEnv)
getNewPosts(index)
} else {
if(length(posts$edge_media_to_caption$edges[[i]][["node"]][["text"]])==0){
post_text[index] <- "no-text"
print("no text in post")
} else {
temp <- posts$edge_media_to_caption$edges[[i]][["node"]][["text"]]
post_text[index] <- gsub("\n", " ", temp)
}
post_id_temp <- posts[i,5]
post_url[index] <-  str_glue("http://instagram.com/p/{post_id_temp}")
post_id[index] <- post_id_temp
post_time[index] <- toString(as.POSIXct(posts[i,7], origin="1970-01-01"))
post_img_url[index] <- posts[i,9]
post_likes[index] <- posts[i,11]
post_owner[index] <- posts[i,12]
#optional: download image
#img_dir <- str_glue("images/{index}_{hashtag}_post_img.jpg")
#download.file(posts[i,8], img_dir, mode = 'wb')
index <- index + 1
}
}
}
#------------------------------
#Get New Posts from Instagram
#------------------------------
getNewPosts <- function(index){
print("getNewPosts function called")
url_next <- str_glue("{url_start}&max_id={end_cursor}")
json <- fromJSON(url_next)
edge_hashtag_to_media <- json$graphql$hashtag$edge_hashtag_to_media
end_cursor <- edge_hashtag_to_media$page_info$end_cursor
posts <- edge_hashtag_to_media$edges$node
assign("end_cursor", end_cursor, envir = .GlobalEnv)
assign("posts", posts, envir = .GlobalEnv)
print(index)
Sys.sleep(1)
extractInfo(index)
}
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("stringr")
install.packages("tidyr")
install.packages("utf8")
library(jsonlite)
library(stringr)
library("jpeg")
library(tidyr)
library(utf8)
#---------------------------------------------------------
#Download JSON File from Instagram for a specific Hashtag
#---------------------------------------------------------
hashtag <- "yesstyle"
url_start <- str_glue("http://instagram.com/explore/tags/{hashtag}/?__a=1")
json <- fromJSON(url_start)
edge_hashtag_to_media <- json$graphql$hashtag$edge_hashtag_to_media
end_cursor <- edge_hashtag_to_media$page_info$end_cursor
posts <- edge_hashtag_to_media$edges$node
#-----------------------------
#Extract Information per Post
#-----------------------------
index <- 1
post_id <- list()
post_url <- list()
post_text <- list()
post_time <- list()
post_likes <- list()
post_owner <- list()
post_img_url <- list()
extractInfo <- function(index){
print("extractInfo function called")
maxrows <- nrow(posts)
for(i in 1:maxrows){
if(i == maxrows){
assign("index", index, envir = .GlobalEnv)
assign("post_id", post_id, envir = .GlobalEnv)
assign("post_text", post_text, envir = .GlobalEnv)
assign("post_time", post_time, envir = .GlobalEnv)
assign("post_img_url", post_img_url, envir = .GlobalEnv)
assign("post_url", post_url, envir = .GlobalEnv)
assign("post_likes", post_likes, envir = .GlobalEnv)
assign("post_owner", post_owner, envir = .GlobalEnv)
getNewPosts(index)
} else {
if(length(posts$edge_media_to_caption$edges[[i]][["node"]][["text"]])==0){
post_text[index] <- "no-text"
print("no text in post")
} else {
temp <- posts$edge_media_to_caption$edges[[i]][["node"]][["text"]]
post_text[index] <- gsub("\n", " ", temp)
}
post_id_temp <- posts[i,5]
post_url[index] <-  str_glue("http://instagram.com/p/{post_id_temp}")
post_id[index] <- post_id_temp
post_time[index] <- toString(as.POSIXct(posts[i,7], origin="1970-01-01"))
post_img_url[index] <- posts[i,9]
post_likes[index] <- posts[i,11]
post_owner[index] <- posts[i,12]
#optional: download image
#img_dir <- str_glue("images/{index}_{hashtag}_post_img.jpg")
#download.file(posts[i,8], img_dir, mode = 'wb')
index <- index + 1
}
}
}
#------------------------------
#Get New Posts from Instagram
#------------------------------
getNewPosts <- function(index){
print("getNewPosts function called")
url_next <- str_glue("{url_start}&max_id={end_cursor}")
json <- fromJSON(url_next)
edge_hashtag_to_media <- json$graphql$hashtag$edge_hashtag_to_media
end_cursor <- edge_hashtag_to_media$page_info$end_cursor
posts <- edge_hashtag_to_media$edges$node
assign("end_cursor", end_cursor, envir = .GlobalEnv)
assign("posts", posts, envir = .GlobalEnv)
print(index)
Sys.sleep(1)
extractInfo(index)
}
extractInfo(index)
install.packages("jpeg")
View(posts)
library(jsonlite)
library(stringr)
library("jpeg")
library(tidyr)
library(utf8)
#---------------------------------------------------------
#Download JSON File from Instagram for a specific Hashtag
#---------------------------------------------------------
hashtag <- "yesstyle"
url_start <- str_glue("http://instagram.com/explore/tags/{hashtag}/?__a=1")
json <- fromJSON(url_start)
edge_hashtag_to_media <- json$graphql$hashtag$edge_hashtag_to_media
end_cursor <- edge_hashtag_to_media$page_info$end_cursor
posts <- edge_hashtag_to_media$edges$node
#-----------------------------
#Extract Information per Post
#-----------------------------
index <- 1
post_id <- list()
post_url <- list()
post_text <- list()
post_time <- list()
post_likes <- list()
post_owner <- list()
post_img_url <- list()
extractInfo <- function(index){
print("extractInfo function called")
maxrows <- nrow(posts)
for(i in 1:maxrows){
if(i == maxrows){
assign("index", index, envir = .GlobalEnv)
assign("post_id", post_id, envir = .GlobalEnv)
assign("post_text", post_text, envir = .GlobalEnv)
assign("post_time", post_time, envir = .GlobalEnv)
assign("post_img_url", post_img_url, envir = .GlobalEnv)
assign("post_url", post_url, envir = .GlobalEnv)
assign("post_likes", post_likes, envir = .GlobalEnv)
assign("post_owner", post_owner, envir = .GlobalEnv)
getNewPosts(index)
} else {
if(length(posts$edge_media_to_caption$edges[[i]][["node"]][["text"]])==0){
post_text[index] <- "no-text"
print("no text in post")
} else {
temp <- posts$edge_media_to_caption$edges[[i]][["node"]][["text"]]
post_text[index] <- gsub("\n", " ", temp)
}
post_id_temp <- posts[i,5]
post_url[index] <-  str_glue("http://instagram.com/p/{post_id_temp}")
post_id[index] <- post_id_temp
post_time[index] <- toString(as.POSIXct(posts[i,7], origin="1970-01-01"))
post_img_url[index] <- posts[i,9]
post_likes[index] <- posts[i,11]
post_owner[index] <- posts[i,12]
#optional: download image
#img_dir <- str_glue("images/{index}_{hashtag}_post_img.jpg")
#download.file(posts[i,8], img_dir, mode = 'wb')
index <- index + 1
}
}
}
#------------------------------
#Get New Posts from Instagram
#------------------------------
getNewPosts <- function(index){
print("getNewPosts function called")
url_next <- str_glue("{url_start}&max_id={end_cursor}")
json <- fromJSON(url_next)
edge_hashtag_to_media <- json$graphql$hashtag$edge_hashtag_to_media
end_cursor <- edge_hashtag_to_media$page_info$end_cursor
posts <- edge_hashtag_to_media$edges$node
assign("end_cursor", end_cursor, envir = .GlobalEnv)
assign("posts", posts, envir = .GlobalEnv)
print(index)
Sys.sleep(1)
extractInfo(index)
}
#Start the Madness
extractInfo(index)
View(post_url)
#Start the Madness
extractInfo(index)
# Setting up my environment
library("tidyverse")
# Setting up my environment
library("tidyverse")
library("ggplot2")
library("dplyr")
library("lubridate")
setwd("C:/Users/chunl/Desktop/Google Data Analytics/Case Study 2/archive/Fitabase Data 4.12.16-5.12.16")
# dailyActivity_merged cover all the data in dailyCalories_merged, dailyIntensities_merged and dailySteps_merged
daily_activity <- read.csv("daily_level/dailyActivity_merged.csv")
sleep_day <- read.csv("daily_level/sleepDay_merged.csv")
